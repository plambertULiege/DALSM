names(res)
res$counts
## Example 1
mround <- function(x,base) base*round(x/base) ## Rounding function
y = mround(rgamma(500,10,2), base=.3) ## Rounded data
tab = table(y) ; print(tab) ## Empirical distribution of the rounded data
## Histogram from the empirical distribution
res = weighted.hist(as.numeric(names(tab)), weight=c(tab))
res = weighted.hist(as.numeric(names(tab)), weight=c(tab), xlab="",main="")
y = mround(rgamma(500,10,2), base=.5) ## Rounded data
tab = table(y) ; print(tab) ## Empirical distribution of the rounded data
y = mround(rgamma(500,10,2), base=.5) ## Rounded data
tab = table(y) ; print(tab) ## Empirical distribution of the rounded data
## Histogram from the empirical distribution
res = weighted.hist(as.numeric(names(tab)), weight=c(tab), xlab="",main="")
## Example 2
## Generate categorized data
brks = c(0,3,5,7,9,15) ; ycat = cut(rgamma(500,10,2),breaks=brks)
tab = table(ycat) ## Empirical distribution of the categorized data
print(tab)
ymid = .5 * (brks[-6]+brks[-1]) ; w = c(tab) ## Midpoints and their weights
## Histogram from weighted data
res = weighted.hist(ymid,weight=w,breaks=brks,xlab="",main="")
mround <- function(x,base) base*round(x/base) ## Rounding function
y = mround(rgamma(500,10,2), base=.5) ## Rounded data
tab = table(y) ; print(tab) ## Empirical distribution of the rounded data
## Histogram from the empirical distribution
res = weighted.hist(as.numeric(names(tab)), weight=c(tab), xlab="",main="")
brks = c(0,3,5,7,9,15) ; ycat = cut(rgamma(500,10,2),breaks=brks)
tab = table(ycat) ## Empirical distribution of the categorized data
print(tab)
ymid = .5 * (brks[-6]+brks[-1]) ; w = c(tab) ## Midpoints and their weights
## Histogram from weighted data
res = weighted.hist(ymid,weight=w,breaks=brks,xlab="",main="")
roxygen2::roxygenise()
rowMeans()
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
plot(fit)
plot(fit, pages=1)
plot(fit, select=0)
plot(fit, select=1:2, pages=1)
plot(fit, select=1:4, pages=1)
plot(fit, select=1:4, pages=1)
plot(fit, select=1:2, pages=1)
plot(fit, select=0) ## Estimated error density
plot(fit, select=0) ## Estimated error density
plot(fit, select=1:4, pages=1) ## Estimated additive terms
print(fit)
## Example 4: density estimation from weighted grouped data
set.seed(123)
n = 500 ## Sample size
y = rgamma(n,10,2) ## Generate raw data
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
y.cat = cut(y,breaks=brks) ## Categorization of the raw data
ymat = cbind(low=head(brks,-1), up=brks[-1]) ## Different grouped data
w = table(y.cat) ## Weight associated to each group data
print(cbind(ymat,w)) ## Observed grouped data
obj.data = Dens1d(y=ymat,w=w,ymin=0,pen.order=2) ## Data object
obj = densityLPS(obj.data,Mean0=10/2,Var0=10/4)  ## Density estimation
print(obj)
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
curve(dgamma(x,10,2),add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red","grey"),lwd=c(2,2,10),lty=c(1,2,1),
legend=c("Estimated density","True density","Observed grouped data"),bty="n")
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
The estimated density for the error term can also be seen,
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
### Estimation of a density from censored data
Besides fitting Nonparametric Double Additive Location-Scale Model to censored data, the DALSM package contains an independent and very fast function, *densityLPS*, for density estimation from right- or interval-censored data with possible constraints on the mean and variance using Laplace P-splines.
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
Let us generate interval-censored (IC) data from a Gamma(10,2) distribution with mean 5.0 and variance 2.5. The mean width of the simulated IC intervals is 2.0.
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
temp = predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
with(temp, cbind(data2,mu=mu,sd=sd,quant))
head(DALSM_IncomeData)
newdata = data.frame(twoincomes=c(1,0),age=c(40,60),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=newdata, probs=c(.2,.5,.8))
head(DALSM_IncomeData$twoincomes)
DALSM_IncomeData$twoincomes
newdata
fit
debug(predict.DALSM)
predict(fit, data = DALSM_IncomeData, newdata=newdata, probs=c(.2,.5,.8))
names(temp)
object$regr1$knots
temp$knots
identical(object$regr1$knots,temp$knots)
temp$knots
object$regr1$knots
args(DesignFormula)
object$regr1$K1
object$regr1$K
temp = DesignFormula(object$formula1, plyr::rbind.fill(data,newdata))
temp$knots.x
args(DesignFormula)
temp = DesignFormula(object$formula1, plyr::rbind.fill(data,newdata), K=K1, pen.order=pen.order1)
K1 = object$regr1$K ; pen.order1 = object$regr1$pen.order
temp = DesignFormula(object$formula1, plyr::rbind.fill(data,newdata), K=K1, pen.order=pen.order1)
temp$knots
object$regr1$knots.x
newdata
range(data$age)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
newdata = data.frame(twoincomes=c(1,0),age=c(40,50),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=newdata, probs=c(.2,.5,.8))
pred = predict(fit, data = DALSM_IncomeData, newdata=newdata, probs=c(.2,.5,.8))
pred = predict(fit, data = DALSM_IncomeData, newdata=newdata, probs=c(.2,.5,.8))
with(pred, cbind(newdata, mu, sd, quant))
with(pred, cbind(newdata,pred))
with(pred, cbind(newdata,unlist(pred))
)
roxygen2::roxygenise()
roxygen2::roxygenise()
set.seed(123)
n = 500 ## Sample size
y = rgamma(n,10,2) ## Generate raw data
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
y.cat = cut(y,breaks=brks) ## Categorization of the raw data
ymat = cbind(low=head(brks,-1), up=brks[-1]) ## Different grouped data
w = table(y.cat) ## Weight associated to each group data
print(cbind(ymat,w)) ## Observed grouped data
obj.data = Dens1d(y=ymat,w=w,ymin=0,pen.order=2) ## Data object
obj.data
obj = densityLPS(obj.data,Mean0=10/2,Var0=10/4)  ## Density estimation
obj
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
curve(dgamma(x,10,2),add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red","grey"),lwd=c(2,2,10),lty=c(1,2,1),
legend=c("Estimated density","True density","Observed grouped data"),bty="n")
set.seed(123)
n = 500 ## Sample size
y = rgamma(n,10,2) ## Generate raw data
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
y.cat = cut(y,breaks=brks) ## Categorization of the raw data
ymat = cbind(low=head(brks,-1), up=brks[-1]) ## Different grouped data
w = table(y.cat) ## Weight associated to each group data
print(cbind(ymat,w)) ## Observed grouped data
rownames(ymat)
ymat
names(ymat)
rownames(ymat)
names(w)
print(names(w),sep=",")
cat(names(w),sep=",")
w
c(w)
knitr::opts_chunk$set(fig.path="man/figures/")
ymat = cbind(low=c(0,2,4,6,10), up=c(2,4,6,10,12))
names(ymat) = c("(0,2]","(2,4]","(4,6]","(6,10]","(10,12]") ##
w = c(4,141,251,103,1) ## Weights
cat("Observed grouped data:",cbind(ymat,w),"\n")
ymat
ymat = cbind(low=c(0,2,4,6,10), up=c(2,4,6,10,12))
rownames(ymat) = c("(0,2]","(2,4]","(4,6]","(6,10]","(10,12]") ##
w = c(4,141,251,103,1) ## Weights
cat("Observed grouped data:",cbind(ymat,w),"\n")
ymat
cbind(ymat,w)
cbind(ymat,weight=w)
ymat = cbind(low=c(0,2,4,6,10), up=c(2,4,6,10,12))
rownames(ymat) = c("(0,2]","(2,4]","(4,6]","(6,10]","(10,12]") ##
w = c(4,141,251,103,1) ## Weights
print(cbind(ymat,weight=w)) ## Observed data
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
last(brks,-1)
tail(brks,-1)
tail(brks,1)
head(brks,-1)
cbind(low=head(brks,-1), up=tail(breaks,-1))
cbind(low=head(brks,-1), up=tail(brks,-1))
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
ymat = cbind(low=head(brks,-1), up=tail(brks,-1))
rownames(ymat) = c("(0,2]","(2,4]","(4,6]","(6,10]","(10,12]") ##
ymat
brks = c(0,2,4,6,10,12) ## Limits of the grouped data
ymat = cbind(low=head(brks,-1), up=tail(brks,-1)) ## Data categories
rownames(ymat) = c("(0,2]","(2,4]","(4,6]","(6,10]","(10,12]") ##
w = c(4,141,251,103,1) ## Weights
print(cbind(ymat,weight=w)) ## Observed grouped data
print(cbind(ymat,weight=w)) ## Observed grouped data
obj.data = Dens1d(y=ymat,w=w,ymin=0,pen.order=2) ## Data object
obj = densityLPS(obj.data,Mean0=10/2,Var0=10/4)  ## Density estimation
print(cbind(ymat,weight=w)) ## Observed grouped data
obj.data = Dens1d(y=ymat,w=w,ymin=0,pen.order=2) ## Data object
obj = densityLPS(obj.data,Mean0=10/2,Var0=10/4)  ## Density estimation
print(obj)
plot(obj,lwd=2)
plot(obj)
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
rowMeans(ymat)
plot(obj,lwd=2)
plot(obj,lwd=2)
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
legend("topright",col=c("black","grey"),lwd=c(2,10),lty=c(1,1),
legend=c("Estimated density","Observed grouped data"),bty="n")
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
legend("topright",col=c("black","grey"),lwd=c(2,10),lty=c(1,1),
legend=c("Estimated density","Observed grouped data"),bty="n")
obj = densityLPS(obj.data)  ## Density estimation
obj
obj.data = Dens1d(y=ymat,w=w,ymin=0,pen.order=2) ## Data object
obj = densityLPS(obj.data)
print(obj)
plot(obj,lwd=2)
plot(obj,lwd=2)
weighted.hist(rowMeans(ymat),breaks=brks,weight=w,freq=FALSE,
main="Estimated density",border=TRUE,col="#D9D9D980",add=TRUE)
legend("topright",col=c("black","grey"),lwd=c(2,10),lty=c(1,1),
legend=c("Estimated density","Observed grouped data"),bty="n")
install.packages("bookdown")
?nl.opts
?optim
install.packages("lbfgs")
library("lbfgs")
?lbfgs
objective <- function(x){
a <- x[1]
b <- x[2]
return(a^2 + b^2)
}
gradient <- function(x){
return(2*x)
}
output <- lbfgs(objective, gradient, c(100,13))
output
args(lbfgs)
37/113
55/113
21/113
37/(37+55)
55/(37+55)
23/59
23/59
28/59
8/59
23/(23+28)
28/(23+28)
?dgamma
library(extraDistr)
install.packages("extraDistr")
library(extraDistr)
library(help=extraDistr)
curve(dbetapr(x,28,17),0,10)
qbetapr(p=c(.025,.975))
qbetapr(p=c(.025,.975),)
qbetapr(p=c(.025,.975),28,17)
?dbetapr
?dbetapr
qbetapr(p=c(.05,.95),28,17)
y1 = 28 ; T1=1857.5 ; y2 = 17 ; T2 = 2768.9
M = 10000
lambda1 = rgamma(M,y1,T1) ; lambda2 = rgamma(M,y2,T2)
theta = lambda1/lambda2
hist(theta,breaks=50,freq=F,main="Histogram of theta.m")
quantile(theta,c(.025,.05,.5,.95,.975))
hist(log(theta))
quantile(log(theta),p=c(.025,.975))
exp(quantile(log(theta),p=c(.025,.975)))
install.packages("R2WinBUGS")
libray("R2WinBUGS")
library("R2WinBUGS")
library("r2winbugs")
library("R2winbugs")
library("R2winbugs")
library("R2WinBUGS")
> require(R2WinBUGS)
HPDinterval(theta)
HPDinterval(mcmc(theta))
1/1.2
1/8
1/15
1/1.2+1.8+1/15
1/1.2+1/8+1/15
1/1.74
1/1.74 + 1/4.1
1/1.96
1/1.96 + 1.4.3
1/1.96 + 1/4.3
?marqLev
?marqLevAlg
?marqLevAlg::marqLevAlg
curve(dchisq(x,2),0,100)
curve(dchisq(x,2),0,10)
curve(dchisq(x,2),0,30)
qchisq(.95,2)
exp(-.5*qchisq(.95,2))
exp(-.5*qchisq(.9,2))
(185-177)/7
(14.5-12)/sqrt(7.2)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
require(R2WinBUGS)
require(coda)
require(rjags)
install.packages("rjags")
require(R2WinBUGS)
require(coda)
require(rjags)
getwd()
exp(-.5*qchisq(.95,2))
exp(-.5*qchisq(.90,2))
args(densityLPS)
?densityLPS
args(svd)
?svd
A=matrix(c(1,-.3,-.3,1),ncol=2)
A
svd(A)
svd(A,nu=0,nv=0)
install.packages("microbenchmarks")
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmark
microbenchmark(ver1=svd(A)$d,ver2=svd(A,nu=0,nv=0)$d)
svd(A,nu=0,nv=0)$d
diag(chol(A))$L
diag(chol(A))
microbenchmark(qr=sum(log(abs(diag(qr(A)$qr)))),svd=sum(log(svd(A,nu=0,nv=0)$d)),chol)
sum(log(abs(diag(qr(A)$qr))))
sum(log(svd(A,nu=0,nv=0)$d))
2*sum(log(diag(chol(A))))
microbenchmark(qr=sum(log(abs(diag(qr(A)$qr)))),svd=sum(log(svd(A,nu=0,nv=0)$d)),chol=2*sum(log(diag(chol(A)))))
microbenchmark(qr=sum(log(abs(diag(qr(A)$qr)))),svd=sum(log(svd(A,nu=0,nv=0)$d)),chol=2*sum(log(diag(chol(A)))),det=determinant(A,logarithm=TRUE)$mod)
determinant
determinant(A,log=TRUE)
determinant(A,log=TRUE)$mod
c(determinant(A,log=TRUE)$mod)
microbenchmark(qr=sum(log(abs(diag(qr(A)$qr)))),svd=sum(log(svd(A,nu=0,nv=0)$d)),chol=2*sum(log(diag(chol(A)))),det=c(determinant(A,logarithm=TRUE)$mod)
)
?determinant
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
67*.85-10
qchis(.95,4)
qchisq(.95,4)
library(mixcure)
?mixcure
data(leukaemia)
z = mixcure(Surv(time, cens) ~ transplant, ~ transplant, data = leukaemia)
warnings()
z
?leukaemia
install.packages("flexsurvcurv")
?flexsurvcurv
install.packages("flexsurvcurve")
install.packages("flexsurvcure")
install.packages("gfcure")
data(rotterdam)
data(Rotterdam)
?survival::rotterdam
library(survival)
data(rotterdam)
data(survival::rotterdam)
?rotterdam
data(rotterdam)
data(cancer, package="survival")
head(cancer)
dim(cancer)
cancer
dim(cancer-
)
dim(cancer)
rfs  <- pmax(rotterdam$recur, rotterdam$death)
length(rfs)
dim(rotterdam)
head(rotterdam)
rfstime <- with(rotterdam, ifelse(recur==1, rtime, dtime))
fit1 <- coxph(Surv(rfstime, rfs) ~ pspline(age) + meno + size +
pspline(nodes) + er,  data = rotterdam)
plot(fit1)
plot(Surv(rfstime, rfs) ~ 1)
ignore <- with(rotterdam, recur ==0 & death==1 & rtime < dtime)
table(ignore)
rfs2 <- with(rotterdam, ifelse(recur==1 | ignore, recur, death))
rfstime2 <- with(rotterdam, ifelse(recur==1 | ignore, rtime, dtime))
fit2 <- coxph(Surv(rfstime2, rfs2) ~ pspline(age) + meno + size +
pspline(nodes) + er,  data = rotterdam)
plot(Surv(rfstime2, rfs2) ~ 1)
gbsg
dim(gbsg)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
fit
fit
fit$call
fit2 = DALSM(y=resp,
formula1 = ~twoincomes+s(age,ref=40)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
roxygen2::roxygenise()
fit2 = DALSM(y=resp,
formula1 = ~twoincomes+s(age,ref=40)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit2,pages=1)
fit2 = DALSM(y=resp,
formula1 = ~twoincomes+s(age,ref=40)+s(eduyrs,ref=12),
formula2 = ~twoincomes+s(age,ref=40)+s(eduyrs,ref=12),
data = DALSM_IncomeData)
AIC(fit,fit2)
fit2
fit
plot(fit2,pages=1)
plot(fit2,pages=1,select=1:2)
plot(fit2,pages=1,select=3:4)
plot(fit2,pages=1,select=1:2
)
DALSM::DesignFormula
roxygen2::roxygenise()
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
fit$regr1$parms
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
fit$regr1$parms
fit$regr2$parms
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age),
data = DALSM_IncomeData)
fit$regr1$parms
fit$regr2$parms
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes,
data = DALSM_IncomeData)
fit$regr2$parms
fit$regr1$parms
roxygen2::roxygenise()
AFTcure
