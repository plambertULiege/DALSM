plot(obj) ## Plot the estimated density
curve(dgamma(x,10,2), ## ... and compare it to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated density","True density"),bty="n")
with(obj, curve(pdist(x),ymin,ymax,lwd=2))
curve(pgamma(x,10,2),add=TRUE,col="red",lwd=2,lty=2,xlab="",ylab="F(x)")
legend("right",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated cdf","True cdf"),bty="n")
plot(obj) ## Plot the estimated density
curve(dgamma(x,10,2), ## ... and compare it to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated density","True density"),bty="n")
with(obj, curve(pdist(x),ymin,ymax,lwd=2,xlab="",ylab="F(x)"))
curve(pgamma(x,10,2),add=TRUE,col="red",lwd=2,lty=2)
legend("right",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated cdf","True cdf"),bty="n")
with(obj, cbind(x=xval, fx=ddist(xvals), Fx=pdist(xvals), hx=hdist(xvals), Hx=Hdist(vals)))
xvals = seq(2,10,by=2)
library(DALSM)
with(obj, cbind(x=xvals, fx=ddist(xvals), Fx=pdist(xvals), hx=hdist(xvals), Hx=Hdist(vals)))
with(obj, cbind(x=xvals, fx=ddist(xvals), Fx=pdist(xvals), hx=hdist(xvals), Hx=Hdist(xvals)))
xvals = seq(2,10,by=2)
with(obj, data.frame(x=xvals, fx=ddist(xvals), Fx=pdist(xvals),
hx=hdist(xvals), Hx=Hdist(xvals)))
library(DALSM)
?densityIC
roxygen2::roxygenise()
roxygen2::roxygenise()
library(DALSM)
?plot.densIC
n = 500 ## Sample size
x = 3 + rgamma(n,10,2) ## Exact generated data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(x-w*width,x+(1-w)*width) ## Generated IC data
head(xmat)
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with fixed mean and variance
obj = densityIC(obj.data,Mean0=3+10/2,Var0=10/4)
plot(obj) ## Histogram of thepseudo-data with the density estimate
curve(dgamma(x-3,10,2), ## ... compared to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red","grey"),lwd=c(2,2,20),lty=c(1,2,1),
legend=c("Fitted density","True density","Pseudo-data"),bty="n")
print(obj) ## ... with summary statistics
roxygen2::roxygenise()
library(DALSM)
?plot.densIC
n = 500 ## Sample size
x = 3 + rgamma(n,10,2) ## Exact generated data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(x-w*width,x+(1-w)*width) ## Generated IC data
head(xmat)
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with fixed mean and variance
obj = densityIC(obj.data,Mean0=3+10/2,Var0=10/4)
plot(obj, hist=TRUE) ## Histogram of the pseudo-data with the density estimate
curve(dgamma(x-3,10,2), ## ... compared to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red","grey"),lwd=c(2,2,10),lty=c(1,2,1),
legend=c("Fitted density","True density","Pseudo-data"),bty="n")
print(obj) ## ... with summary statistics
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit$derr)  ## Plot the estimated error density
legend("topright",col=c("black","grey"),lwd=c(2,20),lty=c(1,1),
legend=c("Estimated error density","Pseudo-residuals"),bty="n")
print(fit$derr) ## ... and provide summary statistics for it
roxygen2::roxygenise()
library(DALSM)
?plot.densIC
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit$derr, hist=TRUE)  ## Plot the estimated error density
legend("topright",col=c("black","grey"),lwd=c(2,10),lty=c(1,1),
legend=c("Estimated error density","Pseudo-residuals"),bty="n")
print(fit$derr) ## ... and provide summary statistics for it
?DALSM
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
plot(fit)
plot(fit)
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
plot(fit)
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
plot(fit)
plot(fit,new.dev=FALSE)
library(DALSM)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit$derr)  ## Plot the estimated error density
print(fit$derr) ## ... and provide summary statistics for it
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
head(resp,n=20)
temp = Dens1d(y=resp,ymin=0) ## Create Dens1d object from positive censored data
obj = densityIC(temp) ## Density estimation for IC & RC data
print(obj) ## Summary information on the estimated density
plot(obj) ## Visualize the estimated density
legend("topright",col=c("black","grey"),lwd=c(2,20),
legend=c("Fitted density","Pseudo-data"),bty="n")
par(mfrow=c(1,1))
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
head(resp,n=20)
temp = Dens1d(y=resp,ymin=0) ## Create Dens1d object from positive censored data
obj = densityIC(temp) ## Density estimation for IC & RC data
print(obj) ## Summary information on the estimated density
plot(obj,hist=TRUE) ## Visualize the estimated density
legend("topright",col=c("black","grey"),lwd=c(2,20),
legend=c("Fitted density","Pseudo-data"),bty="n")
roxygen2::roxygenise()
library(DALSM)
plot(obj$fit$derr,hist=TRUE)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit$derr)  ## Plot the estimated error density
print(fit$derr) ## ... and provide summary statistics for it
plot(obj$fit$derr,hist=TRUE)
plot(fit$derr,hist=TRUE)
fit
true.loc = list(function(x) x, function(x) x^2)
temp=DALSM_additive(fit,true.loc=true.loc)
names(temp)
temp$coverage.loc
plot(fit)
plot(fit)
true.disp = list(function(x) .37/.3*(x-25)-.15, function(x) x^2)
temp=DALSM_additive(fit,true.disp = =true.disp)
temp=DALSM_additive(fit,true.disp = true.disp)
temp$coverage.disp
curve(true.disp[[1]])
curve(true.disp[[1]](x),25,55)
curve(true.disp[[1]](x),25,55)
true.disp[[1]](25)
true.disp[[1]](55)
true.disp = list(function(x) .37/.3*(x-25)+.15, function(x) x^2)
true.disp[[1]](55)
true.disp = list(function(x) .37/30*(x-25)+.15, function(x) x^2)
true.disp[[1]](55)
true.disp = list(function(x) .37/30*(x-25)-.15, function(x) x^2)
true.disp[[1]](55)
true.disp[[1]](25)
temp=DALSM_additive(fit,true.disp = true.disp)
temp$coverage.disp
true.disp = list(age = function(x) .37/30*(x-25)-.15, eduyrs = function(x) x^2)
temp=DALSM_additive(fit,true.disp = true.disp)
temp$coverage.disp
names(temp)
curve(temp$f.disp$age(x),25,55)
curve(temp$f.disp$age,25,55)
curve(temp$f.disp$age(x),25,55)
par(mfrow=c(1,1))
curve(temp$f.disp$age(x),25,55)
temp$f.disp$age
curve(temp$f.disp$age(x),26,54)
temp$f.disp$age(25)
temp$f.disp$age(55)
true.disp = list(age = function(x) .40/30*(x-25)-.15, eduyrs = function(x) x^2)
temp=DALSM_additive(fit,true.disp = true.disp)
names(temp)
temp$coverage.disp
temp$f.disp[[1]]
curve(temp$f.disp[[1]])
curve(temp$f.disp[[1]](x)
)
curve(temp$f.disp[[1]](x))
dev.new()
curve(temp$f.disp[[1]](x))
curve(temp$f.disp[[1]](x),25,55)
curve(true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
curve(function(x) -.2+true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
curve(true.disp[[1]](x)-.2,add=TRUE,lty="dotted",col="red",lwd=2)
curve(true.disp[[1]](x)-.1,add=TRUE,lty="dotted",col="red",lwd=2)
curve(true.disp[[1]](x)-..05,add=TRUE,lty="dotted",col="red",lwd=2)
curve(true.disp[[1]](x)-.05,add=TRUE,lty="dotted",col="red",lwd=2)
curve(function(x) -.25+true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
true.disp = list(age = function(x) .40/30*(x-25)-.25, eduyrs = function(x) x^2)
curve(temp$f.disp[[1]](x),25,55)
curve(true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
true.disp = list(age = function(x) .40/30*(x-25)-.2, eduyrs = function(x) x^2)
curve(true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
temp=DALSM_additive(fit,true.disp = true.disp)
temp$coverage.disp
with(temp,plotRegion(x,y.mat))
with(temp,plotRegion(x,ymat))
names(temp)
names(temp$f.disp.grid)
with(temp$f.disp.grid$age,plotRegion(x,ymat))
with(temp$f.disp.grid$age,plotRegion(x,ym.at))
with(temp$f.disp.grid$age,plotRegion(x,y.mat))
curve(true.disp[[1]](x),add=TRUE,lty="dotted",col="red",lwd=2)
roxygen2::roxygenise()
library(DALSM)
library(DALSM)
?densityIC
roxygen2::roxygenise()
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
predict(fit, data = DALSM_IncomeData, newdata=data2, probs=c(.2,.5,.8))
roxygen2::roxygenise()
library(DALSM)
?densityIC
set.seed(123)
n = 500000 ## Sample size
x = rgamma(n,10,2) ## Exact (unobserved) data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(pmax(0,x-w*width),x+(1-w)*width) ## Generated IC data
t.cens = rexp(n,1/15) ## Right-censoring values
idx.RC = (1:n)[t.cens<x] ## Id's of the right-censored units
xmat[idx.RC,] = cbind(t.cens[idx.RC],Inf) ## Data for RC units: (t.cens,Inf)
head(xmat,15)
## Density estimation
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with mean and variance constraints
obj = densityIC(obj.data,Mean0=10/2,Var0=10/4)
set.seed(123)
n = 50000 ## Sample size
x = rgamma(n,10,2) ## Exact (unobserved) data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(pmax(0,x-w*width),x+(1-w)*width) ## Generated IC data
t.cens = rexp(n,1/15) ## Right-censoring values
idx.RC = (1:n)[t.cens<x] ## Id's of the right-censored units
xmat[idx.RC,] = cbind(t.cens[idx.RC],Inf) ## Data for RC units: (t.cens,Inf)
head(xmat,15)
## Density estimation
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with mean and variance constraints
obj = densityIC(obj.data,Mean0=10/2,Var0=10/4)
print(obj)
plot(obj)
curve(dgamma(x,10,2), ## ... and compare it to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated density","True density"),bty="n")
set.seed(123)
n = 100 ## Sample size
x = rgamma(n,10,2) ## Exact (unobserved) data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(pmax(0,x-w*width),x+(1-w)*width) ## Generated IC data
t.cens = rexp(n,1/15) ## Right-censoring values
idx.RC = (1:n)[t.cens<x] ## Id's of the right-censored units
xmat[idx.RC,] = cbind(t.cens[idx.RC],Inf) ## Data for RC units: (t.cens,Inf)
head(xmat,15)
## Density estimation
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with mean and variance constraints
obj = densityIC(obj.data,Mean0=10/2,Var0=10/4)
print(obj)
plot(obj)
curve(dgamma(x,10,2), ## ... and compare it to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated density","True density"),bty="n")
set.seed(123)
n = 50 ## Sample size
x = rgamma(n,10,2) ## Exact (unobserved) data
width = runif(n,1,3) ## Width of the IC data (mean width = 2)
w = runif(n) ## Positioning of the exact data within the interval
xmat = cbind(pmax(0,x-w*width),x+(1-w)*width) ## Generated IC data
t.cens = rexp(n,1/15) ## Right-censoring values
idx.RC = (1:n)[t.cens<x] ## Id's of the right-censored units
xmat[idx.RC,] = cbind(t.cens[idx.RC],Inf) ## Data for RC units: (t.cens,Inf)
head(xmat,15)
## Density estimation
obj.data = Dens1d(xmat,ymin=0) ## Prepare the data for estimation
## Density estimation with mean and variance constraints
obj = densityIC(obj.data,Mean0=10/2,Var0=10/4)
print(obj)
plot(obj)
curve(dgamma(x,10,2), ## ... and compare it to the true density (in red)
add=TRUE,col="red",lwd=2,lty=2)
legend("topright",col=c("black","red"),lwd=c(2,2),lty=c(1,2),
legend=c("Estimated density","True density"),bty="n")
plot(obj,hist=TRUE)
plot(obj,hist=TRUE,histRC=TRUE)
?survival::Surv
survival::Surv
library(survival)
survival::print.survfit
survival::print.survreg
print.survfit
?print.survfit
roxygen2::roxygenise()
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
library(DALSM)
library(DALSM)
library(DALSM)
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
library(DALSM)
library(DALSM)
library(DALSM)
library(degross)
install.packages("~/Downloads/smoothSurv_2.6.tar.gz", repos = NULL, type = "source")
set.seed(221913282)
x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
y1 <- 0.5*x1 - 0.01*x2 + 0.005 *x1*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
t1 <- exp(y1)                                                    ## left limit of the survival time
t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
surv <- Surv(t1, t2, type = "interval2")                         ## survival object
library(survival)
set.seed(221913282)
x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
y1 <- 0.5*x1 - 0.01*x2 + 0.005 *x1*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
t1 <- exp(y1)                                                    ## left limit of the survival time
t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
surv <- Surv(t1, t2, type = "interval2")                         ## survival object
## Fit the model with an interaction
fit1 <- smoothSurvReg(surv ~ x1 * x2, logscale = ~1, info = FALSE, lambda = exp(2:(-1)))
library(smoothSurv)
set.seed(221913282)
x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
y1 <- 0.5*x1 - 0.01*x2 + 0.005 *x1*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
t1 <- exp(y1)                                                    ## left limit of the survival time
t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
surv <- Surv(t1, t2, type = "interval2")                         ## survival object
## Fit the model with an interaction
fit1 <- smoothSurvReg(surv ~ x1 * x2, logscale = ~1, info = FALSE, lambda = exp(2:(-1)))
summary(fit1, spline = TRUE)
plot(fit1)
set.seed(221913282)
x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
y1 <- 0.5*x1 - 0.01*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
t1 <- exp(y1)                                                    ## left limit of the survival time
t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
surv <- Surv(t1, t2, type = "interval2")                         ## survival object
## Fit the model with an interaction
fit1 <- smoothSurvReg(surv ~ x1 * x2, logscale = ~1, info = FALSE, lambda = exp(2:(-1)))
plot(fit1)
fit1
set.seed(221913282)
x1 <- rbinom(50, 1, 0.4)                                         ## binary covariate
x2 <- rnorm(50, 180, 10)                                         ## continuous covariate
y1 <- 0.5*x1 - 0.01*x2 + 1.5*rnorm(50, 0, 1)      ## generate log(T), left limit
t1 <- exp(y1)                                                    ## left limit of the survival time
t2 <- t1 + rgamma(50, 1, 1)                                      ## right limit of the survival time
surv <- Surv(t1, t2, type = "interval2")                         ## survival object
## Fit the model with an interaction
fit1 <- smoothSurvReg(surv ~ x1 + x2, logscale = ~1, info = FALSE, lambda = exp(2:(-1)))
plot(fit1)
fit1
args(dweibull)
curve(dweibull(x,2.65,133),0,300)
1-pweibull(300,2.65,133)
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authorN <- within(authors, { name <- surname; rm(surname) })
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
books
authorN
m0 <- merge(authorN, books)
m0
merge(authors, books, by.x = "surname", by.y = "name", all = TRUE)
install.packages("simsurv")
library(help="simsurv")
library(simsurv)
library(forecast)
install.packages("forecast")
?forecast::arima.sim
?arima.sim
forecast::arima.sim(100,order=c(1,0,0))
arima.sim(100,order=c(1,0,0))
?arima.sim
arima.sim(list(ar=c(.5,0)),n=100)
plot(arima.sim(list(ar=c(.5,0)),n=100))
plot(arima.sim(list(ar=c(.1,0)),n=100))
plot(arima.sim(list(ar=c(.9,0)),n=100))
plot(arima.sim(list(ar=c(.99,0)),n=100))
obj arima.sim(list(ar=c(.99,0)),n=100)
obj = arima.sim(list(ar=c(.99,0)),n=100)
names(obj)
obj
names(obj-
)
names(obj-
names(obj---
)))
names(obj)
class(obj)
str(obj)
obj[1:10]
plot(obj)
obj = arima.sim(list(ar=c(0,.99),n=100)
)
obj = arima.sim(list(ar=c(0,.99),n=100))
obj = arima.sim(list(ar=c(0,.99)),n=100)
obj[1:10]
plot(obj)
arima(lh, order = c(1,0,0))
lh
plot(lchoose())
plot(lh)
arima(lh, order = c(1,0,0),innov=rnorm)
arima(lh, order = c(1,0,0),innov=rnorm)
obj = arima.sim(list(ar=c(.99,0)),n=100,innov=rnorm)
obj = arima.sim(list(ar=c(.99,0)),n=100)
obj
plot(obj)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.5), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.5), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = 0.5), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = 0.5), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = 0.9), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = 0.9), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.9), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.9), n = 200)
ts.plot(ts.sim)
plot(arima.sim(list(order = c(1,0,0), ar = 0.5), n = 200))
plot(arima.sim(list(order = c(1,0
,0), ar = 0.5), n = 200))
args(prop.table)
?prop.table
install.packages("plyr")
install.packages("~/Downloads/DDPstar_1.0.tar", repos = NULL)
install.packages("~/Downloads/DDPstar_1.0.tar")
install.packages("~/Downloads/DDPstar.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/DDPstar.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/DDPstar_1.0.tar.gz", repos = NULL, type = "source")
install.packages("moments")
install.packages("~/Downloads/DDPstar_1.0.tar.gz", repos = NULL, type = "source")
summary(rnorm(1000))
library(cubicBsplines)
