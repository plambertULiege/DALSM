obj$f.loc.grid$age(30)
obj$f.loc.grid$age
obj$se.loc$age(25)
obj$se.loc$age(55)
obj$se.loc$age(65)
obj$se.loc$age
library(DALSM)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
undebug(DALSM_additive)
obj = DALSM_additive(fit)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
undebug(DALSM_additive)
obj = DALSM_additive(fit)
ci.level
View(fit)
obj = DALSM_additive(fit)
library(DALSM)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
obj = DALSM_additive(fit)
obj$se.loc$age(65)
curve(obj$f.loc$age,25,55)
curve(obj$f.loc$age(x),25,55)
names(obj$f.loc.grid$age)
with(obj$f.loc.grid$age, matplot(x,y.mat,type="l"))
with(obj$f.loc.grid$age, matplot(x,y.mat,type="l",col=1,lty=c(1,2,2)))
with(obj$f.loc.grid$age, matplot(x,y.mat,type="l",xlab="Age",ylab="f.loc(age)",col=1,lty=c(1,2,2)))
with(obj$f.loc.grid$age, matplot(x,y.mat,type="l",xlab="Age",ylab="f.loc(age)",col=1,lty=c(1,2,2)))
curve(obj$f.loc$age,25,55)
curve(obj$f.loc$age(x),25,55)
curve(obj, f.loc$age(c(30,40,50))
)
obj$f.loc$age(c(30,40,50))
obj$se.loc$age(c(30,40,50))
with(obj$f.disp.grid$age, matplot(x,y.mat,type="l",xlab="Age",ylab="f.loc(age)",col=1,lty=c(1,2,2)))
names(obj$f.loc$age)
str(obj$f.loc$age)
str(obj$f.loc.grid$age)
plot(fit)
plot(fit,plot.residuals = TRUE)
fit$n
fit$perc.IC
obj$J1
obj$f.loc.grid[[1]]
obj$f.disp.grid[[1]]
A = matrix(a=1:3,b=1:3)
A = cbind(a=1:3,b=1:3)
A
obj = DALSM_additive(fit)
obj$f.disp.grid[[1]]
obj$f.disp.grid[[1]]$y.grid
obj$f.disp.grid[[1]]$y.mat
library(DALSM)
library(DALSM)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(DALSM)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
roxygen2::roxygenise()
roxygen2::roxygenise()
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
names(obj)
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f(age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f.loc(age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f(age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f.loc(age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f[loc](age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[loc](age)))
)
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[mu](age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^[mu](age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^(mu)(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^mu(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f(age))))
par(mfrow=c(1,2))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab="f[mu](age)"))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[mu](age)))
)
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[mu](age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[sigma](age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^(sigma)(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^sigma(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^sigma*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^(~sigma)*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^~sigma*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^~sigma~*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^~sigma*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^sigma*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^mu*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^loc*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f[loc]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^mu[1]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression(f^(mu)[1]*(age))))
plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'['down here']*'and'^'up'*'there'))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'^mu[1]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'^mu*[1]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'^(mu)[1]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^(mu)[1]*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^mu*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f '[1]^mu*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{mu}*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{ mu}*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~mu}*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{mu}*(age))))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~mu}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", expression('f'[1]^{~sigma}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", expression('f'[1]^{~sigma}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", expression('f'[1]^{sigma}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", expression('f'[1]*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~sigma}*(age))))
par(mfrow=c(1,2),mar=c(3,4,1,1))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~mu}*(age))))
par(mfrow=c(1,2),mar=c(4,5,1,1))
with(obj$f.loc.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~mu}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", expression('f'[1]^{~sigma}*(age))))
with(obj$f.disp.grid$age, plotRegion(x, y.mat, xlab="age", ylab=expression('f'[1]^{~sigma}*(age))))
roxygen2::roxygenise()
library(DALSM)
?plot.DALSM
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit)
plot.DALSM
obj.add$f.loc.grid[[j]]$y.grid
obj$f.loc.grid[[j]]$y.grid
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
obj = DALSM_additive(fit)
obj$f.loc.grid[[1]]
obj.add$f.loc.grid[[j]]$y.grid
obj.add=obj
obj.add$f.loc.grid[[j]]$y.grid
obj.add$f.loc.grid[[1]]$y.grid
obj.add$f.loc.grid[[1]]
obj.add$f.loc.grid[[1]]$y.mat
library(DALSM)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
plot(fit)
fit
message(sprintf("coucou"))
sprintf("coucou")
message("coucou")
?message
noquote(sprintf("coucou"))
temp=plot(fit)
names(temp)
plot.DALSM()
plot.DALSM
library(DALSM)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
temp=plot(fit)
temp
plot.DALSM
library(DALSM)
plot.DALSM
plot2
plot2.DALSM
roxygen2::roxygenise()
library(DALSM)
plot.DALSM
library(help=DALSM)
plot.DALSM
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
library(DALSM)
plot.DALSM
install.packages(roxygen2)
install.packages("roxygen2")
install.packages("ordgam")
library(cubicBsplines)
install.packages("dplyr")
install.packages("plyr")
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
roxygen2::roxygenise()
library(DALSM)
xx = rnorm(500)
obj = Dens1d(xx)
obj
fit = densityGivenMeanVariance(obj,Mean0=0,Var0=1)
fit = densityGivenMeanVariance(obj,Mean0=0,Var0=1,verbose=FALSE)
fit
plot(fit)
names(fit)
fit$dbins
obj
names(obj)
obj$nbibs
obj$nbins
lenght(obj$bins)
length(obj$bins)
length(obj$ugrid)
length(obj$dbins)
obj$dbins
length(obj$bins)
obj$nbins
dim(obj$Bbins)
dim(obj$C)
dim(obj$fgrid)
dim(fit$fgrid)
names(fit)
names(obj)
length(obj$fgrid)
obj$rgrid
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
(30+11+24+26+14+9+14)/12
(10+10+10+11+14+10+15+11+14+9+10+14)/12
roxygen2::roxygenise()
a
aa
aa = c(4,Inf,5,Inf)
is.infinite(aa,)
bb = c(4,Inf,5,Inf)
aa = c(2,3,4,5)
aa = c(1,2,3,4)
ifelse(is.infinite(bb),aa,bb)
cbind(aa,bb,ifelse(is.infinite(bb),aa,bb))
any(is.infinite(bb))
is.vector(aa)
gg = function(x){ stop("x should be greater than 0") ; 1/x}
gg(5)
gg = function(x){ if (x<=0){stop("x should be greater than 0")} else 1/x}
gg(5)
gg(1e-3)
gg(0)
2 < Inf
2 <= Inf
aa
bb
bb2 = c(4,10,5,10)
cbind(aa,bb,bb2)
event = c(1,0,1,0)
cbind(aa,bb,bb2,event)
event2 = rep(1,4)
resp
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
resp
temp = Dens1d(y=resp)
is.matrix(resp)
str(resp)
head(resp)
library(DALSM)
data(DALSM_IncomeData)
temp = Dens1d(y=resp)
resp = DALSM_IncomeData[,1:2]
temp = Dens1d(y=resp)
Dens1d
debug(Dens1d)
temp = Dens1d(y=resp)
temp = Dens1d(y=resp)
temp = Dens1d(y=resp)
range(ymin)
ymin
temp = Dens1d(y=resp)
range(y)
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
temp = Dens1d(y=resp)
debug(Dens1d)
temp = Dens1d(y=resp)
range(yup)
range(ylow)
temp = Dens1d(y=resp)
range(y)
range(ymid)
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
temp = Dens1d(y=resp)
names(temp)
temp
obj = densityGivenMeanVariance(temp)
obj
plot(obj)
temp = Dens1d(y=resp,ymin=0)
obj = densityGivenMeanVariance(temp)
plot(obj)
temp0 = Dens1d(y=resp)
obj0 = densityGivenMeanVariance(temp0)
plot(obj0)
names(obj)
obj$ddist
curve(obj$ddist,add=T,lty="dotted")
curve(obj$ddist(x),add=T,lty="dotted")
curve(obj$ddist(x),add=T,lty="dotted",col="red")
plot(obj0)
plot(obj)
curve(obj0$ddist(x),add=T,lty="dotted",col="red")
obj = Dens1d(y=resp)
head(resp)
args(head)
?head
head(resp,n=20)
head(resp,n=25)
print(obj)
temp = Dens1d(y=resp) ## Create Dens1d object from censored data
obj = densityGivenMeanVariance(temp) ## Density estimation for IC & RC data
obj
temp = Dens1d(y=resp,ymin=0) ## Create Dens1d object from positive censored data
obj = densityGivenMeanVariance(temp) ## Density estimation for IC & RC data
obj
plot(obj) ## Visualize the estimated density
print(obj)
names(obj)
library(DALSM)
example("Dens1d")
example("man/densityGivenMeanVariance")
example("densityGivenMeanVariance")
cat("  Returned functions:  ddist, pdist, hdist, Hdist(x)\n")
library(DALSM)
require(DALSM) ;data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
message(sprintf("\n** %s iterations (%.1f seconds) **",fit$iter,fit$elapsed.time))
temp = Dens1d(y=resp) ## Create Dens1d object from censored data
obj = densityGivenMeanVariance(temp) ## Density estimation for IC & RC data
obj
plot(obj)
temp = Dens1d(y=resp,ymin=0) ## Create Dens1d object from positive censored data
obj = densityGivenMeanVariance(temp) ## Density estimation for IC & RC data
plot(obj)
?predict.lm
predict(obj)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
cbind(event,event2)
y[20,]
event[20]
event2[20]
library(DALSM)
library(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
head(resp,n=20)
temp = Dens1d(y=resp,ymin=0) ## Create Dens1d object from positive censored data
obj = densityGivenMeanVariance(temp) ## Density estimation for IC & RC data
plot(obj) ## Visualize the estimated density
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
plot(fit)
head(DALSM_IncomeData)
head(DALSM_IncomeData,n=20)
data2 = data.frame(age=40,eduyrs=12)
predict.DALSM(obj,data=DALSM_IncomeData,newdata=data2)
DALSM:::predict.DALSM(obj,data=DALSM_IncomeData,newdata=data2)
obj$formula1
names(obj)
predict.DALSM(fit,data=DALSM_IncomeData,newdata=data2)
DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,newdata=data2)
DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,newdata=data2,probs=c(.025,.975))
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,newdata=data2,probs=c(.025,.975))
?predict.lm
predict.lm
newdata
data2
plyr::rbind.fill(data2,NULL)
library(DALSM)
require(DALSM)
data(DALSM_IncomeData)
resp = DALSM_IncomeData[,1:2]
fit = DALSM(y=resp,
formula1 = ~twoincomes+s(age)+s(eduyrs),
formula2 = ~twoincomes+s(age)+s(eduyrs),
data = DALSM_IncomeData)
print(fit)
data2 = data.frame(age=c(40,60),eduyrs=c(18,12))
DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,newdata=data2,probs=c(.025,.975))
DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,probs=c(.025,.975))
mu.fit = DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,probs=c(.025,.975))$mu
cbind(data,mu.fit)[1:20,]
cbind(DALSM_IncomeData,mu.fit)[1:20,]
mu.quant = DALSM:::predict.DALSM(fit,data=DALSM_IncomeData,probs=c(.025,.975))$quant
cbind(DALSM_IncomeData,mu.quant)[1:20,]
cbind(DALSM_IncomeData,mu.fit,mu.quant)[1:20,]
bele = cbind(DALSM_IncomeData,mu.fit,mu.quant)[1:20,]
with(bele,plot(age,mu.fit))
with(bele,plot(eduyrs,mu.fit))
bele = cbind(DALSM_IncomeData,mu.fit,mu.quant)
with(bele,plot(age,mu.fit))
with(bele,plot(eduyrs,mu.fit))
plot(fit)
predict.lm
?predict.lm
y
x
x = runif(100)
y = .2+.5*x+rnorm(1000,0,.1)
plot(x,y)
y = .2+.5*x+rnorm(100,0,.1)
plot(x,y)
obj.lm = lm(y~x)
names(obj.lm)
obj.lm = lm(y~x,data=data.frame(x=x,y=y))
names(obj.lm)
obj.lm$fitted.values
obj.lm$effects
?lm
obj.lm$x
obj.lm = lm(y~x,data=data.frame(x=x,y=y),x=TRUE)
obj.lm$x
names(obj.lm)
obj.lm = lm(y~x,data=data.frame(x=x,y=y))
names(obj.lm)
predict.lm
model.matrix(obj.lm)
?model.matrix
names(fit)
